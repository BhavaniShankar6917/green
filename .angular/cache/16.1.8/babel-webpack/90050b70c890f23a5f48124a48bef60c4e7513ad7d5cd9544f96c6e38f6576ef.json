{"ast":null,"code":"import { environment } from \"./environment\";\n// import { pgTable, serial, text, varchar } from \"drizzle-orm/pg-core\";\n// import { drizzle } from \"drizzle-orm/postgres-js\";\n// import postgres from \"postgres\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport * as i0 from \"@angular/core\";\nclass SupabaseService {\n  constructor() {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\n    this.supabase.auth.setSession({\n      access_token: \"\",\n      refresh_token: \"\"\n    });\n  }\n  signin(email, password) {\n    this.supabase.auth.signInWithPassword({\n      email,\n      password\n    }).then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.log(\"Error logging in \", error);\n    });\n  }\n  registerUser(email, password) {\n    let data;\n    this.supabase.auth.signUp({\n      email,\n      password\n    }).then(response => {\n      console.log(\"User Registered\", response.data);\n      this.supabase.from(\"users\").insert({\n        id: response.data.user?.id,\n        username: \"bhavanishankar\",\n        display_name: \"Bhavani\",\n        email: response.data.user?.email\n      }).then(insert => {\n        console.log(insert);\n      });\n    }).catch(error => {\n      console.log(\"Error registering user\", error);\n    });\n  }\n  getdata() {\n    this.supabase.from(\"posts\").select(\"*\").then(res => {\n      console.log(res.data);\n    });\n  }\n  insertdata() {\n    this.supabase.from(\"users\").insert({\n      username: \"bhavanishankar\",\n      display_name: \"Bhavani Shankar\"\n    }).then(res => {\n      console.log(res.data);\n    });\n  }\n}\nSupabaseService.ɵfac = function SupabaseService_Factory(t) {\n  return new (t || SupabaseService)();\n};\nSupabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SupabaseService,\n  factory: SupabaseService.ɵfac,\n  providedIn: \"root\"\n});\nexport { SupabaseService };","map":{"version":3,"names":["environment","createClient","SupabaseService","constructor","supabase","supabaseUrl","supabaseKey","auth","setSession","access_token","refresh_token","signin","email","password","signInWithPassword","then","response","console","log","catch","error","registerUser","data","signUp","from","insert","id","user","username","display_name","getdata","select","res","insertdata","factory","ɵfac","providedIn"],"sources":["E:\\green\\src\\app\\supabase.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { environment } from \"./environment\";\r\n// import { pgTable, serial, text, varchar } from \"drizzle-orm/pg-core\";\r\n// import { drizzle } from \"drizzle-orm/postgres-js\";\r\n// import postgres from \"postgres\";\r\nimport { createClient, SupabaseClient } from \"@supabase/supabase-js\";\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class SupabaseService {\r\n  private supabase: SupabaseClient;\r\n\r\n  constructor() {\r\n    this.supabase = createClient(\r\n      environment.supabaseUrl,\r\n      environment.supabaseKey\r\n    );\r\n    this.supabase.auth.setSession({ access_token: \"\", refresh_token: \"\" });\r\n  }\r\n  signin(email: string, password: string) {\r\n    this.supabase.auth\r\n      .signInWithPassword({ email, password })\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error logging in \", error);\r\n      });\r\n  }\r\n  registerUser(email: string, password: string) {\r\n    let data: any;\r\n    this.supabase.auth\r\n      .signUp({ email, password })\r\n      .then((response) => {\r\n        console.log(\"User Registered\", response.data);\r\n        this.supabase\r\n          .from(\"users\")\r\n          .insert({\r\n            id: response.data.user?.id,\r\n            username: \"bhavanishankar\",\r\n            display_name: \"Bhavani\",\r\n            email: response.data.user?.email,\r\n          })\r\n          .then((insert) => {\r\n            console.log(insert);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error registering user\", error);\r\n      });\r\n  }\r\n  getdata() {\r\n    this.supabase\r\n      .from(\"posts\")\r\n      .select(\"*\")\r\n      .then((res) => {\r\n        console.log(res.data);\r\n      });\r\n  }\r\n  insertdata() {\r\n    this.supabase\r\n      .from(\"users\")\r\n      .insert({\r\n        username: \"bhavanishankar\",\r\n        display_name: \"Bhavani Shankar\",\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data);\r\n      });\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,eAAe;AAC3C;AACA;AACA;AACA,SAASC,YAAY,QAAwB,uBAAuB;;AACpE,MAGaC,eAAe;EAG1BC,YAAA;IACE,IAAI,CAACC,QAAQ,GAAGH,YAAY,CAC1BD,WAAW,CAACK,WAAW,EACvBL,WAAW,CAACM,WAAW,CACxB;IACD,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACC,UAAU,CAAC;MAAEC,YAAY,EAAE,EAAE;MAAEC,aAAa,EAAE;IAAE,CAAE,CAAC;EACxE;EACAC,MAAMA,CAACC,KAAa,EAAEC,QAAgB;IACpC,IAAI,CAACT,QAAQ,CAACG,IAAI,CACfO,kBAAkB,CAAC;MAAEF,KAAK;MAAEC;IAAQ,CAAE,CAAC,CACvCE,IAAI,CAAEC,QAAQ,IAAI;MACjBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACvB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAI;MACfH,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEE,KAAK,CAAC;IACzC,CAAC,CAAC;EACN;EACAC,YAAYA,CAACT,KAAa,EAAEC,QAAgB;IAC1C,IAAIS,IAAS;IACb,IAAI,CAAClB,QAAQ,CAACG,IAAI,CACfgB,MAAM,CAAC;MAAEX,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAC3BE,IAAI,CAAEC,QAAQ,IAAI;MACjBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,QAAQ,CAACM,IAAI,CAAC;MAC7C,IAAI,CAAClB,QAAQ,CACVoB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC;QACNC,EAAE,EAAEV,QAAQ,CAACM,IAAI,CAACK,IAAI,EAAED,EAAE;QAC1BE,QAAQ,EAAE,gBAAgB;QAC1BC,YAAY,EAAE,SAAS;QACvBjB,KAAK,EAAEI,QAAQ,CAACM,IAAI,CAACK,IAAI,EAAEf;OAC5B,CAAC,CACDG,IAAI,CAAEU,MAAM,IAAI;QACfR,OAAO,CAACC,GAAG,CAACO,MAAM,CAAC;MACrB,CAAC,CAAC;IACN,CAAC,CAAC,CACDN,KAAK,CAAEC,KAAK,IAAI;MACfH,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEE,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN;EACAU,OAAOA,CAAA;IACL,IAAI,CAAC1B,QAAQ,CACVoB,IAAI,CAAC,OAAO,CAAC,CACbO,MAAM,CAAC,GAAG,CAAC,CACXhB,IAAI,CAAEiB,GAAG,IAAI;MACZf,OAAO,CAACC,GAAG,CAACc,GAAG,CAACV,IAAI,CAAC;IACvB,CAAC,CAAC;EACN;EACAW,UAAUA,CAAA;IACR,IAAI,CAAC7B,QAAQ,CACVoB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC;MACNG,QAAQ,EAAE,gBAAgB;MAC1BC,YAAY,EAAE;KACf,CAAC,CACDd,IAAI,CAAEiB,GAAG,IAAI;MACZf,OAAO,CAACC,GAAG,CAACc,GAAG,CAACV,IAAI,CAAC;IACvB,CAAC,CAAC;EACN;;AA5DWpB,eAAe,C;mBAAfA,eAAe;AAAA;AAAfA,eAAe,C;SAAfA,eAAe;EAAAgC,OAAA,EAAfhC,eAAe,CAAAiC,IAAA;EAAAC,UAAA,EAFd;AAAM;SAEPlC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}