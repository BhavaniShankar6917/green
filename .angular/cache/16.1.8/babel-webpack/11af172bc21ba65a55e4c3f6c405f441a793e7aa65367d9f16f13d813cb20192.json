{"ast":null,"code":"import _asyncToGenerator from \"E:/green/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @experimental\n */\nexport const internals = {\n  /**\n   * @experimental\n   */\n  debug: !!(globalThis && globalThis.localStorage && globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true')\n};\nexport class NavigatorLockAcquireTimeoutError extends Error {\n  constructor(message) {\n    super(message);\n    this.isAcquireTimeout = true;\n  }\n}\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @experimental\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport function navigatorLock(_x, _x2, _x3) {\n  return _navigatorLock.apply(this, arguments);\n}\nfunction _navigatorLock() {\n  _navigatorLock = _asyncToGenerator(function* (name, acquireTimeout, fn) {\n    if (internals.debug) {\n      console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\n    }\n    let beginOperation = null;\n    let rejectOperation = null;\n    const beginOperationPromise = new Promise((accept, reject) => {\n      beginOperation = accept;\n      rejectOperation = reject;\n    });\n    // this lets us preserve stack traces over the operation, which the\n    // navigator.locks.request function does not preserve well still\n    const result = _asyncToGenerator(function* () {\n      yield beginOperationPromise;\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock: operation start');\n      }\n      try {\n        return yield fn();\n      } finally {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock: operation end');\n        }\n      }\n    })();\n    const abortController = new globalThis.AbortController();\n    if (acquireTimeout > 0) {\n      setTimeout(() => {\n        beginOperation = null;\n        abortController.abort();\n        if (rejectOperation) {\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\n          }\n          if (rejectOperation) {\n            rejectOperation(new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" timed out after ${acquireTimeout}ms`));\n          }\n          beginOperation = null;\n          rejectOperation = null;\n        }\n      }, acquireTimeout);\n    }\n    yield globalThis.navigator.locks.request(name, {\n      mode: 'exclusive',\n      ifAvailable: acquireTimeout === 0,\n      signal: abortController.signal\n    }, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (lock) {\n        if (lock) {\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock acquired', name);\n          }\n          try {\n            if (beginOperation) {\n              beginOperation();\n              beginOperation = null;\n              rejectOperation = null;\n              yield result;\n            }\n          } catch (e) {\n            // not important to handle the error here\n          } finally {\n            if (internals.debug) {\n              console.log('@supabase/gotrue-js: navigatorLock released', name);\n            }\n          }\n        } else {\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock not immediately available', name);\n          }\n          // no lock was available because acquireTimeout === 0\n          const timeout = new Error(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`);\n          timeout.isAcquireTimeout = true;\n          if (rejectOperation) {\n            rejectOperation(new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`));\n          }\n          beginOperation = null;\n          rejectOperation = null;\n        }\n      });\n      return function (_x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    return yield result;\n  });\n  return _navigatorLock.apply(this, arguments);\n}","map":{"version":3,"names":["internals","debug","globalThis","localStorage","getItem","NavigatorLockAcquireTimeoutError","Error","constructor","message","isAcquireTimeout","navigatorLock","_x","_x2","_x3","_navigatorLock","apply","arguments","_asyncToGenerator","name","acquireTimeout","fn","console","log","beginOperation","rejectOperation","beginOperationPromise","Promise","accept","reject","result","abortController","AbortController","setTimeout","abort","navigator","locks","request","mode","ifAvailable","signal","_ref2","lock","e","timeout","_x4"],"sources":["E:/green/node_modules/@supabase/gotrue-js/dist/module/lib/locks.js"],"sourcesContent":["/**\n * @experimental\n */\nexport const internals = {\n    /**\n     * @experimental\n     */\n    debug: !!(globalThis &&\n        globalThis.localStorage &&\n        globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true'),\n};\nexport class NavigatorLockAcquireTimeoutError extends Error {\n    constructor(message) {\n        super(message);\n        this.isAcquireTimeout = true;\n    }\n}\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @experimental\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function navigatorLock(name, acquireTimeout, fn) {\n    if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\n    }\n    let beginOperation = null;\n    let rejectOperation = null;\n    const beginOperationPromise = new Promise((accept, reject) => {\n        beginOperation = accept;\n        rejectOperation = reject;\n    });\n    // this lets us preserve stack traces over the operation, which the\n    // navigator.locks.request function does not preserve well still\n    const result = (async () => {\n        await beginOperationPromise;\n        if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock: operation start');\n        }\n        try {\n            return await fn();\n        }\n        finally {\n            if (internals.debug) {\n                console.log('@supabase/gotrue-js: navigatorLock: operation end');\n            }\n        }\n    })();\n    const abortController = new globalThis.AbortController();\n    if (acquireTimeout > 0) {\n        setTimeout(() => {\n            beginOperation = null;\n            abortController.abort();\n            if (rejectOperation) {\n                if (internals.debug) {\n                    console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\n                }\n                if (rejectOperation) {\n                    rejectOperation(new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" timed out after ${acquireTimeout}ms`));\n                }\n                beginOperation = null;\n                rejectOperation = null;\n            }\n        }, acquireTimeout);\n    }\n    await globalThis.navigator.locks.request(name, {\n        mode: 'exclusive',\n        ifAvailable: acquireTimeout === 0,\n        signal: abortController.signal,\n    }, async (lock) => {\n        if (lock) {\n            if (internals.debug) {\n                console.log('@supabase/gotrue-js: navigatorLock acquired', name);\n            }\n            try {\n                if (beginOperation) {\n                    beginOperation();\n                    beginOperation = null;\n                    rejectOperation = null;\n                    await result;\n                }\n            }\n            catch (e) {\n                // not important to handle the error here\n            }\n            finally {\n                if (internals.debug) {\n                    console.log('@supabase/gotrue-js: navigatorLock released', name);\n                }\n            }\n        }\n        else {\n            if (internals.debug) {\n                console.log('@supabase/gotrue-js: navigatorLock not immediately available', name);\n            }\n            // no lock was available because acquireTimeout === 0\n            const timeout = new Error(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`);\n            timeout.isAcquireTimeout = true;\n            if (rejectOperation) {\n                rejectOperation(new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`));\n            }\n            beginOperation = null;\n            rejectOperation = null;\n        }\n    });\n    return await result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}