{"ast":null,"code":"import { environment } from \"./environment\";\n// import { pgTable, serial, text, varchar } from \"drizzle-orm/pg-core\";\n// import { drizzle } from \"drizzle-orm/postgres-js\";\n// import postgres from \"postgres\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport * as i0 from \"@angular/core\";\nclass SupabaseService {\n  constructor() {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\n    this.supabase.auth.setSession({\n      access_token: \"\",\n      refresh_token: \"\"\n    });\n  }\n  signin(email, password) {\n    this.supabase.auth.signInWithPassword({\n      email,\n      password\n    }).then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.log(\"Error logging in \", error);\n    });\n    this.supabase.schema(\"public\");\n  }\n  registerUser(email, password) {\n    let data;\n    this.supabase.auth.signUp({\n      email,\n      password\n    }).then(response => {\n      console.log(\"User Registered\", response.data);\n      data = response.data;\n      // this.supabase\n      //   .from(\"users\")\n      //   .insert({\n      //     email: data?.user.email,\n      //     id: data?.user.id,\n      //   })\n      //   .then((res) => {\n      //     console.log(res.data);\n      //   });\n    }).catch(error => {\n      console.log(\"Error registering user\", error);\n    });\n  }\n  getdata() {\n    this.supabase.from(\"posts\").select(\"*\").then(res => {\n      console.log(res.data);\n    });\n  }\n  insertdata() {\n    this.supabase.from(\"users\").insert({\n      username: \"bhavanishankar\",\n      display_name: \"Bhavani Shankar\"\n    }).then(res => {\n      console.log(res.data);\n    });\n  }\n}\nSupabaseService.ɵfac = function SupabaseService_Factory(t) {\n  return new (t || SupabaseService)();\n};\nSupabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SupabaseService,\n  factory: SupabaseService.ɵfac,\n  providedIn: \"root\"\n});\nexport { SupabaseService };","map":{"version":3,"names":["environment","createClient","SupabaseService","constructor","supabase","supabaseUrl","supabaseKey","auth","setSession","access_token","refresh_token","signin","email","password","signInWithPassword","then","response","console","log","catch","error","schema","registerUser","data","signUp","getdata","from","select","res","insertdata","insert","username","display_name","factory","ɵfac","providedIn"],"sources":["E:\\green\\src\\app\\supabase.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { environment } from \"./environment\";\r\n// import { pgTable, serial, text, varchar } from \"drizzle-orm/pg-core\";\r\n// import { drizzle } from \"drizzle-orm/postgres-js\";\r\n// import postgres from \"postgres\";\r\nimport { createClient, SupabaseClient } from \"@supabase/supabase-js\";\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class SupabaseService {\r\n  private supabase: SupabaseClient;\r\n\r\n  constructor() {\r\n    this.supabase = createClient(\r\n      environment.supabaseUrl,\r\n      environment.supabaseKey\r\n    );\r\n    this.supabase.auth.setSession({ access_token: \"\", refresh_token: \"\" });\r\n  }\r\n  signin(email: string, password: string) {\r\n    this.supabase.auth\r\n      .signInWithPassword({ email, password })\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error logging in \", error);\r\n      });\r\n    this.supabase.schema(\"public\");\r\n  }\r\n  registerUser(email: string, password: string) {\r\n    let data: any;\r\n    this.supabase.auth\r\n      .signUp({ email, password })\r\n      .then((response) => {\r\n        console.log(\"User Registered\", response.data);\r\n        data = response.data;\r\n        // this.supabase\r\n        //   .from(\"users\")\r\n        //   .insert({\r\n        //     email: data?.user.email,\r\n        //     id: data?.user.id,\r\n        //   })\r\n        //   .then((res) => {\r\n        //     console.log(res.data);\r\n        //   });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error registering user\", error);\r\n      });\r\n  }\r\n  getdata() {\r\n    this.supabase\r\n      .from(\"posts\")\r\n      .select(\"*\")\r\n      .then((res) => {\r\n        console.log(res.data);\r\n      });\r\n  }\r\n  insertdata() {\r\n    this.supabase\r\n      .from(\"users\")\r\n      .insert({\r\n        username: \"bhavanishankar\",\r\n        display_name: \"Bhavani Shankar\",\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data);\r\n      });\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,eAAe;AAC3C;AACA;AACA;AACA,SAASC,YAAY,QAAwB,uBAAuB;;AACpE,MAGaC,eAAe;EAG1BC,YAAA;IACE,IAAI,CAACC,QAAQ,GAAGH,YAAY,CAC1BD,WAAW,CAACK,WAAW,EACvBL,WAAW,CAACM,WAAW,CACxB;IACD,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACC,UAAU,CAAC;MAAEC,YAAY,EAAE,EAAE;MAAEC,aAAa,EAAE;IAAE,CAAE,CAAC;EACxE;EACAC,MAAMA,CAACC,KAAa,EAAEC,QAAgB;IACpC,IAAI,CAACT,QAAQ,CAACG,IAAI,CACfO,kBAAkB,CAAC;MAAEF,KAAK;MAAEC;IAAQ,CAAE,CAAC,CACvCE,IAAI,CAAEC,QAAQ,IAAI;MACjBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACvB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAI;MACfH,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEE,KAAK,CAAC;IACzC,CAAC,CAAC;IACJ,IAAI,CAAChB,QAAQ,CAACiB,MAAM,CAAC,QAAQ,CAAC;EAChC;EACAC,YAAYA,CAACV,KAAa,EAAEC,QAAgB;IAC1C,IAAIU,IAAS;IACb,IAAI,CAACnB,QAAQ,CAACG,IAAI,CACfiB,MAAM,CAAC;MAAEZ,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAC3BE,IAAI,CAAEC,QAAQ,IAAI;MACjBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,QAAQ,CAACO,IAAI,CAAC;MAC7CA,IAAI,GAAGP,QAAQ,CAACO,IAAI;MACpB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC,CAAC,CACDJ,KAAK,CAAEC,KAAK,IAAI;MACfH,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEE,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN;EACAK,OAAOA,CAAA;IACL,IAAI,CAACrB,QAAQ,CACVsB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXZ,IAAI,CAAEa,GAAG,IAAI;MACZX,OAAO,CAACC,GAAG,CAACU,GAAG,CAACL,IAAI,CAAC;IACvB,CAAC,CAAC;EACN;EACAM,UAAUA,CAAA;IACR,IAAI,CAACzB,QAAQ,CACVsB,IAAI,CAAC,OAAO,CAAC,CACbI,MAAM,CAAC;MACNC,QAAQ,EAAE,gBAAgB;MAC1BC,YAAY,EAAE;KACf,CAAC,CACDjB,IAAI,CAAEa,GAAG,IAAI;MACZX,OAAO,CAACC,GAAG,CAACU,GAAG,CAACL,IAAI,CAAC;IACvB,CAAC,CAAC;EACN;;AA5DWrB,eAAe,C;mBAAfA,eAAe;AAAA;AAAfA,eAAe,C;SAAfA,eAAe;EAAA+B,OAAA,EAAf/B,eAAe,CAAAgC,IAAA;EAAAC,UAAA,EAFd;AAAM;SAEPjC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}